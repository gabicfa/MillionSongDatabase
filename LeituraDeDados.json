{"paragraphs":[{"text":"%pyspark\n#NOME DOS ARQUIVOS\nfilename = \"s3://millionsongsample2/results.txt\"\n\nfull_dataset = sc.textFile(filename).cache()","user":"anonymous","dateUpdated":"2017-11-21T19:35:43-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300084594_-1657824047","id":"20171121-193444_1925140778","dateCreated":"2017-11-21T19:34:44-0200","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:60936"},{"text":"%pyspark\n#TRANSFORMAR NOMES DOS ARQUIVOS EM OBJETOS PYTHON A PARTIR DO FORMATO HDF5\n\ndef open_files(item):\n    import urllib.request\n    import shutil\n    import h5py\n    import math\n    import reverse_geocoder as rg\n\n    file_full_name = item\n    file_small_name = item.split('/')[-1]\n    url = \"https://s3.amazonaws.com/millionsongsample2/{}\".format(file_full_name)\n    with urllib.request.urlopen(url) as response, open(file_small_name, 'wb') as out_file:\n        shutil.copyfileobj(response, out_file)\n    f = h5py.File(file_small_name, 'r')\n    result = {}\n    result['similar_artists'] = list(f['metadata']['similar_artists'])\n    result['artist_terms'] = list(f['metadata']['artist_terms'])\n    result['artist_terms_freq'] = list(f['metadata']['artist_terms_freq'])\n    result['artist_terms_weight'] = list(f['metadata']['artist_terms_weight'])\n    result['segments_start'] = list(f['analysis']['segments_start'])\n    result['bars_start'] = list(f['analysis']['bars_start'])\n    # result['mbtags'] = f['musicbrainz']['mbtags']\n    for i in f['metadata/songs']:\n      for j in i.dtype.names:\n        result[j] = f['metadata']['songs'][j][0]\n    for i in f['analysis/songs']:\n      for j in i.dtype.names:\n        result[j] = f['analysis']['songs'][j][0]\n    for i in f['musicbrainz/songs']:\n      for j in i.dtype.names:\n        result[j] = f['musicbrainz']['songs'][j][0]\n    if (not math.isnan(result['artist_latitude']) and not math.isnan(result['artist_longitude'])):\n        coordinates = (result['artist_latitude'], result['artist_longitude'])\n        info = rg.search(coordinates)\n        result['country_code'] = info[0]['cc']\n    else:\n        result['country_code'] = None\n    return result\n\ndef get_useful_fields(item):\n    result = {}\n    result['artist_name'] = item['artist_name'].decode('UTF-8')\n    result['artist_hotness'] = item['artist_hotttnesss']\n    result['artist_terms'] = [x.decode('UTF-8') for x in item['artist_terms']]\n    result['artist_terms_weight'] = item['artist_terms_weight']\n    result['duration'] = item['duration']\n    result['danceability'] = item['danceability']\n    result['energy'] = item['energy']\n    result['loudeness'] = item['loudness']\n    result['song_hotness'] = item['song_hotttnesss']\n    result['tempo'] = item['tempo']\n    result['title'] = item['title'].decode('UTF-8')\n    result['year'] = int(item['year'])\n    result['country_code'] = item['country_code']\n    return result\n    \nfiles_formatted = full_dataset \\\n        .map(open_files) \\\n        .map(get_useful_fields)\n","user":"anonymous","dateUpdated":"2017-11-21T19:38:21-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300149632_-1936474196","id":"20171121-193549_1763385543","dateCreated":"2017-11-21T19:35:49-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60937"},{"text":"%pyspark\n\n%pyspark\n#PEGAR APENAS ESTILOS MUSICAIS COM PESO ACIMA DE X\n\n#peso minimo\nmin_weight = 0.75\n\ndef get_only_big_artist_terms(item):\n    for i in range(len(item['artist_terms'])):\n        if (item['artist_terms_weight'][i] < min_weight):\n            item['artist_terms'][i] = 0\n    item['artist_terms'] = [x for x in item['artist_terms'] if x != 0]\n    return item\n    \nfiles_formatted_artist_terms = files_formatted \\\n                  .map(get_only_big_artist_terms)\n\nprint(files_formatted_artist_terms.take(1)[0].keys())","user":"anonymous","dateUpdated":"2017-11-21T19:38:14-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300156520_2131891322","id":"20171121-193556_1639302477","dateCreated":"2017-11-21T19:35:56-0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:60938"},{"text":"%pyspark\n#LISTA DE TODOS OS ESTILOS MUSICAS\ndef get_artist_terms(item):\n    return item['artist_terms']\n\nlist_artist_terms = files_formatted \\\n                    .flatMap(lambda x: x['artist_terms']) \\\n                    .map(lambda x : (x, 1)) \\\n                    .reduceByKey(lambda x,y : x + y)","user":"anonymous","dateUpdated":"2017-11-21T19:38:49-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300302255_-1459187990","id":"20171121-193822_2095864169","dateCreated":"2017-11-21T19:38:22-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60939"},{"text":"%pyspark\n#SAMPLE DOS 5 ESTILOS MUSICAIS MAIS FAMOSOS\nsample_list = list_artist_terms.takeOrdered(5, lambda x: -x[1])","user":"anonymous","dateUpdated":"2017-11-21T19:39:08-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300329045_-1885459123","id":"20171121-193849_347781860","dateCreated":"2017-11-21T19:38:49-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60940"},{"text":"%pyspark\n#TRANSFORMAR 5 ESTILOS MUSICAIS E LISTA\nfor i in range(len(sample_list)):\n    sample_list[i] = sample_list[i][0]\n\nprint(sample_list)","user":"anonymous","dateUpdated":"2017-11-21T19:39:32-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300367808_-2022167576","id":"20171121-193927_254952639","dateCreated":"2017-11-21T19:39:27-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60941"},{"text":"%pyspark\n\n\n#COMECAR ANALISE\n\n#CRIAR DICICIONARIO COM ESTILOS -> ANOS -> DURACAO MEDIA\ndata = {}\n\nfor i in sample_list:\n    avg_duration_per_year = files_formatted_artist_terms \\\n                            .filter(lambda x: i in x['artist_terms']) \\\n                            .filter(lambda x: x['year'] != 0) \\\n                            .filter(lambda x: x['duration'] != 0) \\\n                            .map(lambda x : (x['year'], (int(x['duration']), 1))) \\\n                            .reduceByKey(lambda x,y : (x[0] + y[0], x[1] + y[1])) \\\n                            .map(lambda x: (x[0], int(x[1][0] / (x[1][1]))))\n    data[i] = {}\n    for j in avg_duration_per_year.collect():\n        data[i][j[0]] = {}\n        data[i][j[0]]['avg_duration'] = j[1]\n","user":"anonymous","dateUpdated":"2017-11-21T19:39:51-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300387205_-2038311705","id":"20171121-193947_1133351185","dateCreated":"2017-11-21T19:39:47-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60942"},{"text":"%pyspark\n#ADICIONAR ATRIBUTO FRQUENCIA MEDIA NO DICIONARIO, ESTILO -> ANO -> FREQUENCIA\nfor i in sample_list:\n    avg_tempo_per_year = files_formatted_artist_terms \\\n                            .filter(lambda x: i in x['artist_terms']) \\\n                            .filter(lambda x: x['year'] != 0) \\\n                            .filter(lambda x: x['tempo'] != 0) \\\n                            .map(lambda x : (x['year'], (int(x['tempo']), 1))) \\\n                            .reduceByKey(lambda x,y : (x[0] + y[0], x[1] + y[1])) \\\n                            .map(lambda x: (x[0], int(x[1][0] / (x[1][1]))))\n    for j in avg_tempo_per_year.collect():\n        if (j[0] not in data[i]):\n            data[i][j[0]] = {}\n        data[i][j[0]]['avg_tempo'] = j[1]","user":"anonymous","dateUpdated":"2017-11-21T19:40:44-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300416977_-562537518","id":"20171121-194016_328289913","dateCreated":"2017-11-21T19:40:16-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60943"},{"text":"%pyspark\n#ADICIONAR ATRIBUTO LOUDNESS NO DICIONARIO, ESTILO -> ANO -> LOUDNESS\nfor i in sample_list:\n    avg_loudness_per_year = files_formatted_artist_terms \\\n                            .filter(lambda x: i in x['artist_terms']) \\\n                            .filter(lambda x: x['year'] != 0) \\\n                            .filter(lambda x: x['loudeness'] != 0) \\\n                            .map(lambda x : (x['year'], (int(x['loudeness']), 1))) \\\n                            .reduceByKey(lambda x,y : (x[0] + y[0], x[1] + y[1])) \\\n                            .map(lambda x: (x[0], round(x[1][0] / (x[1][1]), 2)))\n    for j in avg_loudness_per_year.collect():\n        if (j[0] not in data[i]):\n            data[i][j[0]] = {}\n        data[i][j[0]]['avg_loudness'] = j[1]\n","user":"anonymous","dateUpdated":"2017-11-21T19:41:11-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300467239_1733921398","id":"20171121-194107_1216412873","dateCreated":"2017-11-21T19:41:07-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60944"},{"text":"%pyspark\n#ADICIONAR ATRIBUTO NUMERO DE MUSICAS NO DICIONARIO, ESTILO -> ANO -> NUMERO DE MUSICAS\nfor i in sample_list:\n    num_songs_per_year = files_formatted_artist_terms \\\n                            .filter(lambda x: i in x['artist_terms']) \\\n                            .filter(lambda x: x['year'] != 0) \\\n                            .map(lambda x : (x['year'], 1)) \\\n                            .reduceByKey(lambda x,y : x + y)\n    for j in num_songs_per_year.collect():\n        if (j[0] not in data[i]):\n            data[i][j[0]] = {}\n        data[i][j[0]]['num_songs'] = j[1]","user":"anonymous","dateUpdated":"2017-11-21T19:41:36-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300491392_1127972528","id":"20171121-194131_1398313958","dateCreated":"2017-11-21T19:41:31-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60945"},{"text":"%pyspark\n#ADICIONAR ATRIBUTO HOTNESS MEDIO DAS MUSICAS NO DICIONARO, ESTILO -> ANO -> HOTNESS MEDIO MUSICAS\nfor i in sample_list:\n    avg_song_hotness_per_year = files_formatted_artist_terms \\\n                            .filter(lambda x: i in x['artist_terms']) \\\n                            .filter(lambda x: x['year'] != 0) \\\n                            .filter(lambda x: x['song_hotness'] != 'NaN') \\\n                            .map(lambda x : (x['year'], (x['song_hotness'], 1))) \\\n                            .reduceByKey(lambda x,y : (x[0] + y[0], x[1] + y[1])) \\\n                            .map(lambda x: (x[0], round(x[1][0] / (x[1][1]), 2)))\n    for j in avg_song_hotness_per_year.collect():\n        if (j[0] not in data[i]):\n            data[i][j[0]] = {}\n        data[i][j[0]]['avg_song_hotness'] = j[1]","user":"anonymous","dateUpdated":"2017-11-21T19:42:10-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300526164_2124133403","id":"20171121-194206_1779282991","dateCreated":"2017-11-21T19:42:06-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60946"},{"text":"%pyspark\n\n#DEMORA MUITO!\n\n#ADICIONAR AS 30 MUSICAS COM MAIOR HOTNESS NO DICIONARIO, ESTILO -> ANO -> LISTA DE MUSICAS\n\n#AINDA NAO TA FUNCIONANDO DIREITO, A CHAVE DO DICIONARIO TA COMO STRING EM VEZ DE INT, EX: '1981' x 1981\n\nfor i in sample_list:\n    years = files_formatted_artist_terms \\\n                            .filter(lambda x: i in x['artist_terms']) \\\n                            .filter(lambda x: x['year'] != 0) \\\n                            .map(lambda x : (x['year'], 1)) \\\n                            .reduceByKey(lambda x,y : x + y) \\\n                            .map(lambda x : x[0])\n    hot_songs = {}\n    for k in years.collect():\n        hot_songs = files_formatted_artist_terms \\\n                    .filter(lambda x: i in x['artist_terms']) \\\n                    .filter(lambda x: x['year'] == k) \\\n                    .filter(lambda x: x['song_hotness'] != 'NaN') \\\n                    .map(lambda x: (x['title'], x['song_hotness']))\n        x = 30\n        len_songs = hot_songs.count()\n        if (len_songs < x):\n            x = len_songs\n        if (k not in data[i]):\n            data[i][int(k)] = {}\n        data[i][int(k)]['hot_songs'] = hot_songs.takeOrdered(x, lambda y: -y[1])","user":"anonymous","dateUpdated":"2017-11-21T19:42:32-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300548393_-1771266965","id":"20171121-194228_1800237961","dateCreated":"2017-11-21T19:42:28-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60947"},{"text":"%pyspark\n\n#DEMORA MUITO!\n\n#ADICIONAR AS 30 ARTISTAS COM MAIOR HOTNESS NO DICIONARIO, ESTILO -> ANO -> LISTA DE ARTISTAS\n\n#AINDA NAO TA FUNCIONANDO DIREITO, A CHAVE DO DICIONARIO TA COMO STRING EM VEZ DE INT, EX: '1981' x 1981\n\nfor i in sample_list:\n    years = files_formatted_artist_terms \\\n                            .filter(lambda x: i in x['artist_terms']) \\\n                            .filter(lambda x: x['year'] != 0) \\\n                            .map(lambda x : (x['year'], 1)) \\\n                            .reduceByKey(lambda x,y : x + y) \\\n                            .map(lambda x : x[0])\n    hot_artists = {}\n    for k in years.collect():\n        hot_artists = files_formatted_artist_terms \\\n                    .filter(lambda x: i in x['artist_terms']) \\\n                    .filter(lambda x: x['year'] == k) \\\n                    .filter(lambda x: x['artist_hotness'] != 'NaN') \\\n                    .map(lambda x: (x['title'], x['artist_hotness']))\n        x = 30\n        len_songs = hot_artists.count()\n        if (len_songs < x):\n            x = len_songs\n        if (k not in data[i]):\n            data[i][int(k)] = {}\n        data[i][int(k)]['hot_artists'] = hot_artists.takeOrdered(x, lambda y: -y[1])","user":"anonymous","dateUpdated":"2017-11-21T19:43:13-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300552597_-126080668","id":"20171121-194232_1035285022","dateCreated":"2017-11-21T19:42:32-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60948"},{"text":"%pyspark\n#ADICIONAR NUMERO DE MUSICAS POR PAIS POR ANO\nfor i in sample_list:\n    num_song_per_country_per_year = files_formatted_artist_terms \\\n                            .filter(lambda x: i in x['artist_terms']) \\\n                            .filter(lambda x: x['year'] != 0) \\\n                            .filter(lambda x: x['country_code'] != None) \\\n                            .map(lambda x:  (( x['year'], x['country_code']), 1) ) \\\n                            .reduceByKey(lambda x,y : (x + y)) \\\n                            .map(lambda x: (x[0][0], [{\"code\": x[0][1], \"z\": x[1]}]))\\\n                            .reduceByKey(lambda x,y : x + y)\n    for j in num_song_per_country_per_year.collect():\n        if (j[0] not in data[i]):\n            data[i][j[0]] = {}\n        data[i][j[0]]['songs_country'] = j[1]","user":"anonymous","dateUpdated":"2017-11-21T19:43:45-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300593014_1406435498","id":"20171121-194313_1226176613","dateCreated":"2017-11-21T19:43:13-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60949"},{"text":"%pyspark\n#ADICIONAR SUBGENEROS POR ANO\nfrom collections import Counter\n\ndef count_subgenero(item):\n    c = Counter(item[1])\n    genero = item[0][1]\n    del c[genero]\n    total = len(c)\n    #return(item[0], c)\n    return(item[0], [(x,item[1].count(x)) for x in set(item[1])])\n    \nfor i in sample_list:\n    years = files_formatted_artist_terms \\\n            .filter(lambda x: i in x['artist_terms']) \\\n            .filter(lambda x: x['year'] != 0) \\\n            .map(lambda x : ((x['year'],i), x['artist_terms'])) \\\n            .reduceByKey(lambda x,y : x + y)\\\n            .map(count_subgenero)\n\n    for j in years.collect():\n        if (j[0][0] not in data[i]):\n            data[i][j[0][0]] = {}\n        data[i][j[0][0]]['subgenero'] = j[1]","user":"anonymous","dateUpdated":"2017-11-21T19:44:30-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300625276_767229657","id":"20171121-194345_2013507156","dateCreated":"2017-11-21T19:43:45-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:60950"},{"text":"%pyspark\n#SALVAR EM DATA EM UM ARQUIVO JSON\nimport json\n\nwith open('data.txt', 'w') as outfile:\n    json.dump(data, outfile)","user":"anonymous","dateUpdated":"2017-11-21T19:45:38-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511300684743_-83942179","id":"20171121-194444_1850025216","dateCreated":"2017-11-21T19:44:44-0200","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:61784"}],"name":"LeituraDeDados","id":"2CZ3WGJXB","angularObjects":{"2CWF9V1MD:shared_process":[],"2CVHXW4CJ:shared_process":[],"2CWDJQ211:shared_process":[],"2CVYBBEJH:shared_process":[],"2CVF266E1:shared_process":[],"2CZ1U2TTY:shared_process":[],"2CYKEJY94:shared_process":[],"2CXAQBDC3:shared_process":[],"2CXXTGR61:shared_process":[],"2CXE8MMDS:shared_process":[],"2CYP1K7NX:shared_process":[],"2CXGW1KYW:shared_process":[],"2CXHUJN4B:shared_process":[],"2CVBDKT7V:shared_process":[],"2CW33TVQ1:shared_process":[],"2CW1ZTPME:shared_process":[],"2CXMYKPHG:shared_process":[],"2CVJKSVSV:shared_process":[],"2CWUWWPVS:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}