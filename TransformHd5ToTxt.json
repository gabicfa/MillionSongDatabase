{"paragraphs":[{"text":"%pyspark\n#LER OS ARQUIVOS LOCAIS\nimport glob\n\nfiles = []\nfor filename in glob.iglob('Documents/Insper/6_Semestre/BigData/projeto3/fullData/data/A/**/**/*.h5', recursive=True):\n    files.append(filename)\n\nrdd_files = sc.parallelize(files, 10)","user":"anonymous","dateUpdated":"2017-11-22T10:52:26-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511355111131_1501775860","id":"20171122-105151_793146882","dateCreated":"2017-11-22T10:51:51-0200","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:27732"},{"text":"%pyspark\n#TRANSFORMAR NOMES DOS ARQUIVOS EM OBJETOS PYTHON A PARTIR DO FORMATO HDF5\n\ndef open_files(item):\n    import urllib.request\n    import shutil\n    import h5py\n    import math\n    import reverse_geocoder as rg\n\n    # file_full_name = item\n    # file_small_name = item.split('/')[-1]\n    # url = \"https://s3.amazonaws.com/millionsongsample2/{}\".format(file_full_name)\n    # with urllib.request.urlopen(url) as response, open(file_small_name, 'wb') as out_file:\n    #     shutil.copyfileobj(response, out_file)\n    f = h5py.File(item, 'r')\n    result = {}\n    result['similar_artists'] = list(f['metadata']['similar_artists'])\n    result['artist_terms'] = list(f['metadata']['artist_terms'])\n    result['artist_terms_freq'] = list(f['metadata']['artist_terms_freq'])\n    result['artist_terms_weight'] = list(f['metadata']['artist_terms_weight'])\n    result['segments_start'] = list(f['analysis']['segments_start'])\n    result['bars_start'] = list(f['analysis']['bars_start'])\n    # result['mbtags'] = f['musicbrainz']['mbtags']\n    for i in f['metadata/songs']:\n      for j in i.dtype.names:\n        result[j] = f['metadata']['songs'][j][0]\n    for i in f['analysis/songs']:\n      for j in i.dtype.names:\n        result[j] = f['analysis']['songs'][j][0]\n    for i in f['musicbrainz/songs']:\n      for j in i.dtype.names:\n        result[j] = f['musicbrainz']['songs'][j][0]\n    if (not math.isnan(result['artist_latitude']) and not math.isnan(result['artist_longitude'])):\n        coordinates = (result['artist_latitude'], result['artist_longitude'])\n        info = rg.search(coordinates)\n        result['country_code'] = info[0]['cc']\n    else:\n        result['country_code'] = None\n    return result\n\ndef get_useful_fields(item):\n    result = {}\n    result['artist_name'] = item['artist_name'].decode('UTF-8')\n    result['artist_hotness'] = item['artist_hotttnesss']\n    result['artist_terms'] = [x.decode('UTF-8') for x in item['artist_terms']]\n    result['artist_terms_weight'] = item['artist_terms_weight']\n    result['duration'] = item['duration']\n    result['danceability'] = item['danceability']\n    result['energy'] = item['energy']\n    result['loudeness'] = item['loudness']\n    result['song_hotness'] = item['song_hotttnesss']\n    result['tempo'] = item['tempo']\n    result['title'] = item['title'].decode('UTF-8')\n    result['year'] = int(item['year'])\n    result['country_code'] = item['country_code']\n    return result\n    \nfiles_formatted = rdd_files \\\n        .map(open_files) \\\n        .map(get_useful_fields)","user":"anonymous","dateUpdated":"2017-11-22T10:52:55-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511355146937_642124224","id":"20171122-105226_1708503277","dateCreated":"2017-11-22T10:52:26-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:27733"},{"text":"%pyspark\n#SALVAR EM DATA EM UM ARQUIVO JSON\ndef dict_to_string(item):\n    import json\n    return json.dumps(item)\n\nfiles_dict_string = final_files \\\n                    .map(dict_to_string)","user":"anonymous","dateUpdated":"2017-11-22T11:01:14-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511355175676_1326623165","id":"20171122-105255_51688989","dateCreated":"2017-11-22T10:52:55-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:27734"},{"text":"%pyspark\nfiles_dict_string = sc.saveAsTextFile(\"files.txt\")","user":"anonymous","dateUpdated":"2017-11-22T11:01:31-0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511355674127_559550995","id":"20171122-110114_1307446421","dateCreated":"2017-11-22T11:01:14-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:27735"}],"name":"TransformHd5ToTxt","id":"2D133H3G6","angularObjects":{"2CWF9V1MD:shared_process":[],"2CVHXW4CJ:shared_process":[],"2CWDJQ211:shared_process":[],"2CVYBBEJH:shared_process":[],"2CVF266E1:shared_process":[],"2CZ1U2TTY:shared_process":[],"2CYKEJY94:shared_process":[],"2CXAQBDC3:shared_process":[],"2CXXTGR61:shared_process":[],"2CXE8MMDS:shared_process":[],"2CYP1K7NX:shared_process":[],"2CXGW1KYW:shared_process":[],"2CXHUJN4B:shared_process":[],"2CVBDKT7V:shared_process":[],"2CW33TVQ1:shared_process":[],"2CW1ZTPME:shared_process":[],"2CXMYKPHG:shared_process":[],"2CVJKSVSV:shared_process":[],"2CWUWWPVS:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}